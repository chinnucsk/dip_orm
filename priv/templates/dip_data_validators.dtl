%% -*- erlang -*-

% @doc Generate object from proplist with type checks. No require checks. Work with SYSTEM access privilegis.
-spec from_proplist(Proplist) -> {ok,{{model|capfirst}}} | {error,Reason} when
    Proplist :: [{atom(),{{module}}:field()}],
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: [{{module}}:params_error()].
from_proplist(Proplist) ->
    {{module}}:from_proplist(Proplist).

% @doc Fill object from proplist with type checks. No require checks. Work with SYSTEM access privilegis.
-spec from_proplist(Proplist,{{model|capfirst}}) -> {ok,{{model|capfirst}}} | {error,Reason} when
    Proplist :: [{atom(),{{module}}:field()}],
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: [{{module}}:params_error()].
from_proplist(Proplist,{{model|capfirst}}) ->
    {{module}}:from_proplist(Proplist,{{model|capfirst}}).

% @doc Generate object from proplist which keys are binary with type checks. No require checks. Work with USER access privilegis.
-spec from_bin_proplist(Proplist) -> {ok,{{model|capfirst}}} | {error,Reason} when
    Proplist :: [{binary(),{{module}}:field()}],
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: [{{module}}:params_error()].
from_bin_proplist(Proplist) ->
    {{module}}:from_bin_proplist(Proplist).

% @doc Fill object from proplist which keys are binary with type checks. No require checks. Work with USER access privilegis.
-spec from_bin_proplist(Proplist,{{model|capfirst}}) -> {ok,{{model|capfirst}}} | {error,Reason} when
    Proplist :: [{binary(),{{module}}:field()}],
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: [{{module}}:params_error()].
from_bin_proplist(Proplist,{{model|capfirst}}) ->
    {{module}}:from_bin_proplist(Proplist,{{model|capfirst}}).

% @doc Convert object to proplist.
-spec to_proplist({{model|capfirst}}) -> [{Field,FieldType}] when
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Field :: {{module}}:field(),
    FieldType :: {{module}}:field_type().
to_proplist({{model|capfirst}}) ->
    {{module}}:to_proplist({{model|capfirst}}).

-spec validator(Field) ->
    fun((Value) -> ok | {error,Reason}) when
        Field :: {{module}}:field(),
        Value :: any(),
	Reason :: any().
validator(Field) ->
    {{module}}:validator(Field).
    
valid({{model|capfirst}}) ->
    {{module}}:valid({{model|capfirst}}).
     
