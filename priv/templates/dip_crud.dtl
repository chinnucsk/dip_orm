%% -*- erlang -*-

-spec get( Scope, 
	%\ {% for index_field in index_fields %}
	{{index_field.name|capfirst}}
	%\    {% if not forloop.last %}
	,
	%|    {% endif %}
	%\ {% endfor %}
	) -> {ok, {{model|capfirst}} } | {error,Reason} when
    Scope :: scope:scope(),
    %| {% for index_field in index_fields %}
    {{index_field.name|capfirst}} :: {{index_field.type}},
    %| {% endfor %}
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: db_error | undefined | timeout.
get( Scope,
  %\ {% for index_field in index_fields %}
  {{index_field.name|capfirst}}
  %\    {% if not forloop.last %}
  ,
  %|    {% endif %}
  %\ {% endfor %}
 ) ->
    call(Scope, {get,
	  %\ {% for index_field in index_fields %}
	  %|     {% if not forloop.first %}
	  %\
		 ,
	  %|     {% endif %}
	  {{index_field.name|capfirst}}
	  %\ {% endfor %}
	 }).

-spec find(Scope,Request) -> {ok, Result} | {error,Reason} when
    Scope :: scope:scope(),
    Request :: {Where,Order,Limit,Offset},
    Where :: any(),
    Order :: {{module}}:field() | { {{module}}:field(), asc | desc},
    Limit :: non_neg_integer(),
    Offset :: non_neg_integer(),
    Result :: [{{module}}:{{model}}()],
    Reason :: db_error | timeout.
find(Scope,{_Where,_Order,_Limit,_Offset} = Req) ->
    call(Scope,{find,Req}).

% @doc Save object in database and check required fields.
-spec save(Scope,{{model|capfirst}}) -> {ok,{{model|capfirst}}} | {error,Reason} when
    Scope :: scope:scope(),
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: db_error | not_unique |
              not_modified | [{ {{module}}:required_field() , required},...] | timeout.
save(Scope,{{model|capfirst}}) ->
    call(Scope,{save,{{model|capfirst}}}).

% @doc Delete objects from Database.
-spec delete(Scope,{{model|capfirst}}) -> ok | {error,Reason} when
    Scope :: scope:scope(),
    {{model|capfirst}} :: {{module}}:{{model}}(),
    Reason :: db_error | timeout.
delete(Scope,{{model|capfirst}}) ->
    call(Scope,{delete,{{model|capfirst}}}).

