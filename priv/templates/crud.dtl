%% -*- erlang -*-

-spec get(
	%\ {% for index_field in index_fields %}
	{{index_field.name|capfirst}}
	%\    {% if not forloop.last %}
	,
	%|    {% endif %}
	%\ {% endfor %}
	) -> {ok, {{model|capfirst}} } | {error,Reason} when
    %| {% for index_field in index_fields %}
    {{index_field.name|capfirst}} :: {{index_field.type}},
    %| {% endfor %}
    {{model|capfirst}} :: {{model}}(),
    Reason :: db_error | undefined.
get(
  %\ {% for index_field in index_fields %}
  {{index_field.name|capfirst}}
  %\    {% if not forloop.last %}
  ,
  %|    {% endif %}
  %\ {% endfor %}
 ) ->
    do([error_m ||
	   Result <- dip_orm(
		       select({{model}}),
		       where(
			 %| {% for index_field in index_fields %}
			 %|     {% if not forloop.first %}
				       %\
			 andalso
			 %|     {% endif %}
			 {{index_field.name}} == {{index_field.name|capfirst}}
			 %\ {% endfor %}
			)),
	   dip_utils:one(Result)
	      ]).

-spec find(Request) -> {ok, Result} | {error,Reason} when
    Request :: {Where,Order,Limit,Offset},
    Where :: any(),
    Order :: field() | {field(), asc | desc},
    Limit :: non_neg_integer(),
    Offset :: non_neg_integer(),
    Result :: [{{model}}()],
    Reason :: db_error.
find({Where,Order,Limit,Offset}) ->
    dip_orm(
      select({{model}}),
      where(Where),
      order_by(Order),
      limit(Limit),
      offset(Offset)
     ).


% @doc Save object in database and check required fields.
-spec save({{model|capfirst}}) -> {ok,{{model|capfirst}}} | {error,Reason} when
    {{model|capfirst}} :: {{model}}(),
    Reason :: db_error | not_unique | not_modified | [{required_field() , required},...].
save({{model|capfirst}}) ->
    do([error_m ||
	   valid({{model|capfirst}}),
	   ChangedFields <- get_changed_fields({{model|capfirst}}),
	   Result <- save({{model|capfirst}},ChangedFields,is_new({{model|capfirst}})),
	   dip_utils:one(Result)
	      ]).
save(_{{model|capfirst}},ChangedFields,true) ->
    dip_orm(
      insert({{model}}),
      values(ChangedFields)
     );
save({{model|capfirst}},ChangedFields,false) ->
    dip_orm(
      update({{model}}),
      values(ChangedFields),
      where(
	%| {% for index_field in index_fields %}
	%|     {% if not forloop.first %}
	%\
	andalso
	%|     {% endif %}
	{{index_field.name}} == {{model|capfirst}}#{{module}}.{{index_field.name}}
	%\ {% endfor %}
       )).

% @doc Delete objects from Database.
-spec delete({{model|capfirst}}) -> ok | {error,Reason} when
    {{model|capfirst}} :: {{model}}(),
    Reason :: db_error.
delete({{model|capfirst}}) ->
    dip_orm(
      delete({{model}}),
      where(
	%| {% for index_field in index_fields %}
	%|     {% if not forloop.first %}
	%\
	andalso
	%|     {% endif %}
	{{index_field.name}} == {{model|capfirst}}#{{module}}.{{index_field.name}}
	%\ {% endfor %}
       )).

